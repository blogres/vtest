const l=JSON.parse('{"key":"v-17540224","path":"/java/basis/oop.html","title":"OOP核心","lang":"zh-CN","frontmatter":{"icon":"java","title":"OOP核心","category":["Java"],"headerDepth":5,"date":"2019-08-14T00:00:00.000Z","tag":["OOP"],"description":"写代码的终极思路 1，场景化需求分析 2，准确逻辑化需求分析 3，寻找解决模型——设计模式 4，编写调试，重复1-4 5，功能测试和性能测试 代码学习方法 1， 整体认知：要知道效果 2， 跟着源代码敲一遍，解决报错问题（百度定性，定范围|帮助文档查查查） 3， 一行一行地分析代码，在看代码的同时，需要理解里面出现的所有你现在还不能理解的东西，理解过程...","head":[["meta",{"property":"og:url","content":"https://blogres.github.io/vtest/java/basis/oop.html"}],["meta",{"property":"og:title","content":"OOP核心"}],["meta",{"property":"og:description","content":"写代码的终极思路 1，场景化需求分析 2，准确逻辑化需求分析 3，寻找解决模型——设计模式 4，编写调试，重复1-4 5，功能测试和性能测试 代码学习方法 1， 整体认知：要知道效果 2， 跟着源代码敲一遍，解决报错问题（百度定性，定范围|帮助文档查查查） 3， 一行一行地分析代码，在看代码的同时，需要理解里面出现的所有你现在还不能理解的东西，理解过程..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://blogres.github.io/vtest/"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-02T07:51:13.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"OOP核心"}],["meta",{"property":"article:author","content":"blogres"}],["meta",{"property":"article:tag","content":"OOP"}],["meta",{"property":"article:published_time","content":"2019-08-14T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-02-02T07:51:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"OOP核心\\",\\"image\\":[\\"https://blogres.github.io/vtest/\\"],\\"datePublished\\":\\"2019-08-14T00:00:00.000Z\\",\\"dateModified\\":\\"2024-02-02T07:51:13.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"blogres\\",\\"url\\":\\"/article\\"}]}"]]},"headers":[{"level":2,"title":"写代码的终极思路","slug":"写代码的终极思路","link":"#写代码的终极思路","children":[]},{"level":2,"title":"代码学习方法","slug":"代码学习方法","link":"#代码学习方法","children":[]},{"level":2,"title":"OOP 核心上（Object-Oriented Programming）","slug":"oop-核心上-object-oriented-programming","link":"#oop-核心上-object-oriented-programming","children":[{"level":3,"title":"对象变量——引用","slug":"对象变量——引用","link":"#对象变量——引用","children":[{"level":4,"title":"引用与指向——对象变量与堆空间开辟的独立对象空间","slug":"引用与指向——对象变量与堆空间开辟的独立对象空间","link":"#引用与指向——对象变量与堆空间开辟的独立对象空间","children":[]},{"level":4,"title":"多个引用，一个对象","slug":"多个引用-一个对象","link":"#多个引用-一个对象","children":[]},{"level":4,"title":"一个引用多个对象","slug":"一个引用多个对象","link":"#一个引用多个对象","children":[]},{"level":4,"title":"练习题","slug":"练习题","link":"#练习题","children":[]}]},{"level":3,"title":"方法定义，方法重载，构造函数","slug":"方法定义-方法重载-构造函数","link":"#方法定义-方法重载-构造函数","children":[{"level":4,"title":"方法定义","slug":"方法定义","link":"#方法定义","children":[{"level":5,"title":"返回值","slug":"返回值","link":"#返回值","children":[]},{"level":5,"title":"方法传参","slug":"方法传参","link":"#方法传参","children":[{"level":6,"title":"基本类型传参","slug":"基本类型传参","link":"#基本类型传参","children":[]},{"level":6,"title":"对象类型传参","slug":"对象类型传参","link":"#对象类型传参","children":[]},{"level":6,"title":"引申一下：数组对象作为方法参数传递对象","slug":"引申一下-数组对象作为方法参数传递对象","link":"#引申一下-数组对象作为方法参数传递对象","children":[]}]}]},{"level":4,"title":"方法重载","slug":"方法重载","link":"#方法重载","children":[{"level":5,"title":"可变参数示例","slug":"可变参数示例","link":"#可变参数示例","children":[]},{"level":5,"title":"练习题","slug":"练习题-1","link":"#练习题-1","children":[]},{"level":5,"title":"内存分析TODO","slug":"内存分析todo","link":"#内存分析todo","children":[]}]},{"level":4,"title":"构造函数","slug":"构造函数","link":"#构造函数","children":[{"level":5,"title":"什么是构造方法","slug":"什么是构造方法","link":"#什么是构造方法","children":[]},{"level":5,"title":"隐式的构造方法","slug":"隐式的构造方法","link":"#隐式的构造方法","children":[]},{"level":5,"title":"提供一个有参的构造方法","slug":"提供一个有参的构造方法","link":"#提供一个有参的构造方法","children":[]},{"level":5,"title":"构造方法的重载","slug":"构造方法的重载","link":"#构造方法的重载","children":[]},{"level":5,"title":"练习-构造方法","slug":"练习-构造方法","link":"#练习-构造方法","children":[]}]}]},{"level":3,"title":"This与static","slug":"this与static","link":"#this与static","children":[{"level":4,"title":"This","slug":"this","link":"#this","children":[{"level":5,"title":"内部类调用外部类中的this原理","slug":"内部类调用外部类中的this原理","link":"#内部类调用外部类中的this原理","children":[]},{"level":5,"title":"This内部类的实例，builder模式","slug":"this内部类的实例-builder模式","link":"#this内部类的实例-builder模式","children":[]},{"level":5,"title":"This调用构造函数","slug":"this调用构造函数","link":"#this调用构造函数","children":[]},{"level":5,"title":"This成员变量传参","slug":"this成员变量传参","link":"#this成员变量传参","children":[]},{"level":5,"title":"把对象本身作为返回值","slug":"把对象本身作为返回值","link":"#把对象本身作为返回值","children":[]},{"level":5,"title":"内部类的使用","slug":"内部类的使用","link":"#内部类的使用","children":[]}]},{"level":4,"title":"Static","slug":"static","link":"#static","children":[{"level":5,"title":"类的成员变量--类属性--【类的属性并非对象的属性，重点区别】","slug":"类的成员变量-类属性-【类的属性并非对象的属性-重点区别】","link":"#类的成员变量-类属性-【类的属性并非对象的属性-重点区别】","children":[{"level":6,"title":"类属性（类的成员变量）定义","slug":"类属性-类的成员变量-定义","link":"#类属性-类的成员变量-定义","children":[]},{"level":6,"title":"访问类（class-static变量）属性","slug":"访问类-class-static变量-属性","link":"#访问类-class-static变量-属性","children":[]},{"level":6,"title":"什么时候使用对象属性，什么时候使用类属性","slug":"什么时候使用对象属性-什么时候使用类属性","link":"#什么时候使用对象属性-什么时候使用类属性","children":[]}]},{"level":5,"title":"类方法","slug":"类方法","link":"#类方法","children":[{"level":6,"title":"类方法定义","slug":"类方法定义","link":"#类方法定义","children":[]},{"level":6,"title":"调用类方法","slug":"调用类方法","link":"#调用类方法","children":[]},{"level":6,"title":"什么时候使用对象方法，什么时候使用类方法","slug":"什么时候使用对象方法-什么时候使用类方法","link":"#什么时候使用对象方法-什么时候使用类方法","children":[]}]},{"level":5,"title":"对象属性初始化——研究的是被new出来的东西","slug":"对象属性初始化——研究的是被new出来的东西","link":"#对象属性初始化——研究的是被new出来的东西","children":[{"level":6,"title":"对象属性初始化的方式","slug":"对象属性初始化的方式","link":"#对象属性初始化的方式","children":[]}]},{"level":5,"title":"类属性初始化——研究的是class{}代码层面的","slug":"类属性初始化——研究的是class-代码层面的","link":"#类属性初始化——研究的是class-代码层面的","children":[{"level":6,"title":"声明属性时初始化","slug":"声明属性时初始化","link":"#声明属性时初始化","children":[]},{"level":6,"title":"静态代码块初始化","slug":"静态代码块初始化","link":"#静态代码块初始化","children":[]}]}]}]}]},{"level":2,"title":"OOP核心下（继承，接口，抽象）","slug":"oop核心下-继承-接口-抽象","link":"#oop核心下-继承-接口-抽象","children":[{"level":3,"title":"接口，继承，super关键字，Object 超类","slug":"接口-继承-super关键字-object-超类","link":"#接口-继承-super关键字-object-超类","children":[]},{"level":3,"title":"对象转型","slug":"对象转型","link":"#对象转型","children":[{"level":4,"title":"引用类型与对象类型的概念","slug":"引用类型与对象类型的概念","link":"#引用类型与对象类型的概念","children":[]},{"level":4,"title":"向上转型，向下转型，没有继承联系的两个类的转换","slug":"向上转型-向下转型-没有继承联系的两个类的转换","link":"#向上转型-向下转型-没有继承联系的两个类的转换","children":[{"level":5,"title":"没有继承关系的一旦转换，会报错","slug":"没有继承关系的一旦转换-会报错","link":"#没有继承关系的一旦转换-会报错","children":[]},{"level":5,"title":"Interface层面（向上，向下转型）","slug":"interface层面-向上-向下转型","link":"#interface层面-向上-向下转型","children":[]},{"level":5,"title":"接口向上转型，向下转型","slug":"接口向上转型-向下转型","link":"#接口向上转型-向下转型","children":[]},{"level":5,"title":"Instanceof—引用对象的类型是否是指定类型的系列（自己到子类）","slug":"instanceof—引用对象的类型是否是指定类型的系列-自己到子类","link":"#instanceof—引用对象的类型是否是指定类型的系列-自己到子类","children":[]}]},{"level":4,"title":"重写（基于继承结构的）","slug":"重写-基于继承结构的","link":"#重写-基于继承结构的","children":[]},{"level":4,"title":"多态--（多种状态）","slug":"多态-多种状态","link":"#多态-多种状态","children":[{"level":5,"title":"操作符的多态","slug":"操作符的多态","link":"#操作符的多态","children":[]},{"level":5,"title":"类的多态","slug":"类的多态","link":"#类的多态","children":[]}]},{"level":4,"title":"Super关键字","slug":"super关键字","link":"#super关键字","children":[]},{"level":4,"title":"Object类","slug":"object类","link":"#object类","children":[{"level":5,"title":"public class Object","slug":"public-class-object","link":"#public-class-object","children":[]},{"level":5,"title":"一般使用的时候需要重写equals","slug":"一般使用的时候需要重写equals","link":"#一般使用的时候需要重写equals","children":[]},{"level":5,"title":"toString:把对象打印成字符串","slug":"tostring-把对象打印成字符串","link":"#tostring-把对象打印成字符串","children":[]},{"level":5,"title":"Finalize：当一个对象没有任何引用指向的时候，他就满足垃圾回收条件","slug":"finalize-当一个对象没有任何引用指向的时候-他就满足垃圾回收条件","link":"#finalize-当一个对象没有任何引用指向的时候-他就满足垃圾回收条件","children":[]}]},{"level":4,"title":"Final","slug":"final","link":"#final","children":[]},{"level":4,"title":"类图——uml图的一种，uml建模（帮助理清思路）","slug":"类图——uml图的一种-uml建模-帮助理清思路","link":"#类图——uml图的一种-uml建模-帮助理清思路","children":[]}]}]}],"git":{"createdTime":1706860273000,"updatedTime":1706860273000,"contributors":[{"name":"topjfy","email":"topjfk@163.com","commits":1}]},"readingTime":{"minutes":32.43,"words":9729},"filePathRelative":"java/basis/oop.md","localizedDate":"2019年8月14日","excerpt":"","autoDesc":true}');export{l as data};
